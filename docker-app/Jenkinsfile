node {
   //def artServer = Artifactory.newServer url: SERVER_URL, credentialsId: CREDENTIALS
  def artServer = Artifactory.server('jfrogtraining')
   artServer.credentialsId='art-docker-ci'
   def buildInfo = Artifactory.newBuildInfo()
   stage 'Checkout Gradle'
        git url: 'https://github.com/jfrogtraining/project-examples.git'
dir('gradle-examples/4/gradle-example-ci-server') {
 sh './increment.sh'
}

    stage 'Build Gradle'
        //def server = Artifactory.newServer url: SERVER_URL, credentialsId: CREDENTIALS
        def artifactoryGradle = Artifactory.newGradleBuild()
        artifactoryGradle.tool = 'gradle' // Tool name from Jenkins configuration
        artifactoryGradle.deployer repo:'libs-dev-local', server: artServer
        artifactoryGradle.resolver repo:'libs-dev', server: artServer
        artifactoryGradle.run rootDir: "gradle-examples/4/gradle-example-ci-server/", buildFile: 'build.gradle', tasks: 'clean artifactoryPublish', buildInfo: buildInfo


   // Mark the code checkout 'stage'....
   stage('Checkout Docker') {

   // Get some code from a GitHub repository
   git url: 'https://github.com/jfrogtraining/docker-lifecycle-scripts'
   }
   //def artServer = Artifactory.server('jfrogtraining')
   //def buildInfo = Artifactory.newBuildInfo()
   buildInfo.env.capture = true
withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'art-docker-ci',
usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
def uname=env.USERNAME
def pw=env.PASSWORD
artServer.username=uname
artServer.password=pw
 sh 'echo credentials applied'
 def curlstr="curl -u"+uname+':'+pw+" 'https://jfrogtraining.jfrog.io/jfrogtraining/"
dir('docker-app') {
   stage('Resolve') {
       def warverstr=curlstr+ "api/search/latestVersion?g=org.jfrog.example.gradle&a=webservice&repos=libs-dev'"
       sh warverstr +' > war/version.txt'
       env.WARVER=readFile('war/version.txt')
        def downloadSpec = """{
 "files": [
  {
   "pattern": "libs-dev/org/jfrog/example/gradle/webservice/"""+env.WARVER+"""/*.war",
   "target": "war/webservice.war",
   "flat":"true"
  }
  ]
}"""
    println(downloadSpec)
    artServer.download(downloadSpec, buildInfo)
   }
   stage('Build and Deploy') {
        def tagName='jfrogtraining-docker-dev.jfrog.io/docker-app:'+env.BUILD_NUMBER
        docker.build(tagName)
        def artDocker= Artifactory.docker(uname, pw)
        artDocker.push(tagName, 'docker-dev-local', buildInfo)
        artServer.publishBuildInfo(buildInfo)
        //sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
        //sh 'cat retag_out.json'
        //def retagstr=curlstr+"api/docker/docker-dev-local/v2/promote' -X POST -H 'Content-Type: application/json' -T retag_out.json"
        //sh retagstr
   }
}
}
}
node {
    git url: 'https://github.com/jfrogtraining/docker-lifecycle-scripts'
    def artServer = Artifactory.server('jfrogtraining')
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'art-docker-ci',
usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
def uname=env.USERNAME
def pw=env.PASSWORD
artServer.username=uname
artServer.password=pw
        def artDocker= Artifactory.docker(uname, pw)
def curlstr="curl -u"+uname+':'+pw+" 'https://jfrogtraining.jfrog.io/jfrogtraining/"
    dir('docker-app/app-test') {
        stage('testing app') {
            def imageName='jfrogtraining-docker-dev.jfrog.io/docker-app'+':'+env.BUILD_NUMBER
            sh 'docker images | grep docker-app'
            println(imageName)
            sh 'docker rmi '+imageName+' || true'
            artDocker.pull(imageName)
            //docker.withRegistry('https://jfrogtraining-docker-dev.jfrog.io/', 'art-docker-ci') {
                docker.image(imageName).withRun('-p 8181:8181') {c ->
                    sleep 5
                    sh 'curl "http://localhost:8181/swampup/"'
                }
            //}
        }
        stage('Promotions') {
            def promotestr=curlstr+"api/build/promote/$JOB_NAME/$BUILD_NUMBER' -X POST -H 'Content-Type: application/vnd.org.jfrog.artifactory.build.PromotionRequest+json' "
            def dockerstr=promotestr + "-T promote-docker.json"
            def warstr=promotestr + "-T promote-war.json"
            sh 'cat promote-docker.json'
            println(dockerstr)
            sh dockerstr
            sh 'cat promote-war.json'
            sh warstr
            // Promote build
            sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
            sh 'cat retag_out.json'
            def retagstr=curlstr+"api/docker/docker-prod-local/v2/promote' -X POST -H 'Content-Type: application/json' -T retag_out.json"
            sh retagstr
            //println(env.WARVER)
            }
            stage('distribute')
            {
              def distribStr=curlstr+'api/build/distribute/'+env.JOB_NAME+'/'+env.BUILD_NUMBER+"' -X POST -H 'Content-Type: application/json' "
              def dockerDistrib = distribStr+ "-T distributeDocker.json"
              println(dockerDistrib)
              sh dockerDistrib
              def warDistrib = distribStr+"-T distributeWar.json"
              sh warDistrib
            }
        }
    }
}
