node {
   // Mark the code checkout 'stage'....
   stage('Checkout') {

   // Get some code from a GitHub repository
   git url: 'https://github.com/jfrogtraining/docker-lifecycle-scripts'
   }
   def artServer = Artifactory.server('jfrogtraining')
   def buildInfo = Artifactory.newBuildInfo()
   buildInfo.env.capture = true
withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'art-docker-ci',
usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
def uname=env.USERNAME
def pw=env.PASSWORD
artServer.username=uname
artServer.password=pw
 sh 'echo credentials applied'
 def curlstr="curl -u"+uname+':'+pw+" 'https://jfrogtraining.jfrog.io/jfrogtraining/"
dir('docker-app') {
   stage('Resolve') {
       def warverstr=curlstr+ "api/search/latestVersion?g=org.jfrog.example.gradle&a=webservice&repos=libs-dev'"
       sh warverstr +' > war/version.txt'
       env.WARVER=readFile('war/version.txt')
        def downloadSpec = """{
 "files": [
  {
   "pattern": "libs-dev/org/jfrog/example/gradle/webservice/"""+env.WARVER+"""/*.war",
   "target": "war/webservice.war",
   "flat":"true"
  }
  ]
}"""
    println(downloadSpec)
    artServer.download(downloadSpec, buildInfo)
   }
   stage('Build and Deploy') {
        def tagName='jfrogtraining-docker-dev.jfrog.io/docker-app:'+env.BUILD_NUMBER
        docker.build(tagName)
        def artDocker= Artifactory.docker(uname, pw)
        artDocker.push(tagName, 'docker-dev-local', buildInfo)
        artServer.publishBuildInfo(buildInfo)
        //sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
        //sh 'cat retag_out.json'
        //def retagstr=curlstr+"api/docker/docker-dev-local/v2/promote' -X POST -H 'Content-Type: application/json' -T retag_out.json"
        //sh retagstr
   }
}
}
}
node {
    git url: 'https://github.com/jfrogtraining/docker-lifecycle-scripts'
    def artServer = Artifactory.server('jfrogtraining')
    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'art-docker-ci',
usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
def uname=env.USERNAME
def pw=env.PASSWORD
artServer.username=uname
artServer.password=pw
        def artDocker= Artifactory.docker(uname, pw)
def curlstr="curl -u"+uname+':'+pw+" 'https://jfrogtraining.jfrog.io/jfrogtraining/"
    dir('docker-app/app-test') {
        stage('testing app') {
            def imageName='jfrogtraining-docker-dev.jfrog.io/docker-app'+':'+env.BUILD_NUMBER
            sh 'docker images | grep docker-app'
            println(imageName)
            sh 'docker rmi '+imageName+' || true'
            artDocker.pull(imageName)
            //docker.withRegistry('https://jfrogtraining-docker-dev.jfrog.io/', 'art-docker-ci') {
                docker.image(imageName).withRun('-p 8181:8181') {c ->
                    sleep 5
                    sh 'curl "http://localhost:8181/swampup/"'
                }
            //}
        }
        stage('Promotions') {
            def promotionConfig = [
                // Mandatory parameters
                'buildName'          : env.JOB_NAME,
                'buildNumber'        : env.BUILD_NUMBER,
                'targetRepo'         : 'docker-prod-local',

                // Optional parameters
                'comment'            : 'App image has passed test',
                'sourceRepo'         : 'docker-dev-local',
                'status'             : 'Released',
                'includeDependencies': false,
                'copy'               : false
            ]

            // Promote build
            artServer.promote promotionConfig
            sh 'sed -E "s/@/$BUILD_NUMBER/" retag.json > retag_out.json'
            sh 'cat retag_out.json'
            def retagstr=curlstr+"api/docker/docker-prod-local/v2/promote' -X POST -H 'Content-Type: application/json' -T retag_out.json"
            sh retagstr
            //println(env.WARVER)
            def getProps=curlstr+"api/storage/libs-dev/org/jfrog/example/gradle/webservice/"+env.WARVER+"/webservice-"+env.WARVER+".war?properties=build.name,build.number'"
            sh getProps+' > warprops.json'
            sh 'cat warprops.json | jq -r \'.properties."build.name"[0]\' > warbuildname.txt'
            def warBuildName=readFile('warbuildname.txt')
            warBuildName = warBuildName.trim()
            env.WARBUILDNAME=warBuildName
            sh 'sed -E "s/@/$WARBUILDNAME/" promoteStatus.aql > promoteStatus_out.aql'
            sh 'cat warprops.json | jq -r \'.properties."build.number"[0]\' > warbuildnum.txt'
            def warBuildNum=readFile('warbuildnum.txt')
            warBuildNum = warBuildNum.trim()
            env.WARBUILDNUM=warBuildNum
            sh 'sed -E "s/#/$WARBUILDNUM/" promoteStatus_out.aql -i'
            sh 'cat promoteStatus_out.aql'
            def aqlCurl=curlstr+"api/search/aql' -X POST -T promoteStatus_out.aql"
            sh aqlCurl +' > promoteStatus.txt'
            sh 'cat promoteStatus.txt'
            sh 'cat promoteStatus.txt | jq -r \'.results[0]."build.promotions"[0]."build.promotion.status"\' > promoteStatus1.txt'
            def promoteStatus=readFile('promoteStatus1.txt')
            promoteStatus=promoteStatus.trim()
            println(promoteStatus)
            if(promoteStatus!='Released') {
            def promotionWarConfig = [
                // Mandatory parameters
                'buildName'          : warBuildName,
                'buildNumber'        : warBuildNum,
                'targetRepo'         : 'libs-release-local',

                // Optional parameters
                'comment'            : 'App image has passed test',
                'sourceRepo'         : 'libs-dev-local',
                'status'             : 'Released',
                'includeDependencies': false,
                'copy'               : false
            ]
            artServer.promote promotionWarConfig
            }
            stage('distribute')
            {
              def dockerDistrib=curlstr+'api/build/distribute/'+env.JOB_NAME+'/'+env.BUILD_NUMBER+"' -X POST -H 'Content-Type: application/json' -T distribute.json"
              if(promoteStatus!='Released') {
                sh 'sed -E "s/#/$WARVER/g" distributeWar.json > distributeWar_out.json'
                def warDistrib=curlstr+"api/distribute' -X POST -H 'Content-Type: application/json' -T distributeWar_out.json"
                sh warDistrib
              }
            }
        }
    }
}
}